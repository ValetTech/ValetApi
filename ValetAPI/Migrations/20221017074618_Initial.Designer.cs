// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ValetAPI.Data;

#nullable disable

namespace ValetAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221017074618_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ValetAPI.Models.AreaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Description = "Gorgeous Main Dining AreaEntity",
                            Name = "Main Dining",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 12,
                            Description = "Outside with a view",
                            Name = "Outside",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 13,
                            Description = "Upstairs away from the noise",
                            Name = "Upstairs",
                            VenueId = 1
                        });
                });

            modelBuilder.Entity("ValetAPI.Models.AreaSittingEntity", b =>
                {
                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("SittingId")
                        .HasColumnType("int");

                    b.HasKey("AreaId", "SittingId");

                    b.HasIndex("SittingId");

                    b.ToTable("AreaSittings");

                    b.HasData(
                        new
                        {
                            AreaId = 11,
                            SittingId = 111
                        },
                        new
                        {
                            AreaId = 11,
                            SittingId = 112
                        },
                        new
                        {
                            AreaId = 11,
                            SittingId = 113
                        },
                        new
                        {
                            AreaId = 12,
                            SittingId = 121
                        },
                        new
                        {
                            AreaId = 12,
                            SittingId = 122
                        },
                        new
                        {
                            AreaId = 12,
                            SittingId = 123
                        },
                        new
                        {
                            AreaId = 13,
                            SittingId = 131
                        },
                        new
                        {
                            AreaId = 13,
                            SittingId = 132
                        },
                        new
                        {
                            AreaId = 13,
                            SittingId = 133
                        });
                });

            modelBuilder.Entity("ValetAPI.Models.CustomerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.wick@gmail.com",
                            FirstName = "John",
                            LastName = "Wick",
                            Phone = "0411111111"
                        },
                        new
                        {
                            Id = 2,
                            Email = "keith.smith@gmail.com",
                            FirstName = "Keith",
                            LastName = "Smith",
                            Phone = "0411111112"
                        },
                        new
                        {
                            Id = 3,
                            Email = "penny.wayne@gmail.com",
                            FirstName = "Penny",
                            LastName = "Wayne",
                            Phone = "0411111113"
                        });
                });

            modelBuilder.Entity("ValetAPI.Models.ReservationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("NoGuests")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SittingId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SittingId");

                    b.HasIndex("VenueId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ValetAPI.Models.SittingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Sittings");

                    b.HasData(
                        new
                        {
                            Id = 111,
                            Capacity = 50,
                            EndTime = new DateTime(2022, 12, 25, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2022, 12, 25, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Breakfast",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 112,
                            Capacity = 50,
                            EndTime = new DateTime(2022, 12, 25, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2022, 12, 25, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Lunch",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 113,
                            Capacity = 50,
                            EndTime = new DateTime(2022, 12, 25, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2022, 12, 25, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Dinner",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 121,
                            Capacity = 50,
                            EndTime = new DateTime(2022, 12, 25, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2022, 12, 25, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Breakfast",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 122,
                            Capacity = 50,
                            EndTime = new DateTime(2022, 12, 25, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2022, 12, 25, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Lunch",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 123,
                            Capacity = 50,
                            EndTime = new DateTime(2022, 12, 25, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2022, 12, 25, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Dinner",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 131,
                            Capacity = 50,
                            EndTime = new DateTime(2022, 12, 25, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2022, 12, 25, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Breakfast",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 132,
                            Capacity = 50,
                            EndTime = new DateTime(2022, 12, 25, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2022, 12, 25, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Lunch",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 133,
                            Capacity = 50,
                            EndTime = new DateTime(2022, 12, 25, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2022, 12, 25, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Dinner",
                            VenueId = 1
                        });
                });

            modelBuilder.Entity("ValetAPI.Models.TableEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("ValetAPI.Models.VenueEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 George St",
                            Name = "Saki"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ValetAPI.Models.AreaEntity", b =>
                {
                    b.HasOne("ValetAPI.Models.VenueEntity", "Venue")
                        .WithMany("Areas")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("ValetAPI.Models.AreaSittingEntity", b =>
                {
                    b.HasOne("ValetAPI.Models.AreaEntity", "Area")
                        .WithMany("AreaSittings")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ValetAPI.Models.SittingEntity", "Sitting")
                        .WithMany("AreaSittings")
                        .HasForeignKey("SittingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Sitting");
                });

            modelBuilder.Entity("ValetAPI.Models.ReservationEntity", b =>
                {
                    b.HasOne("ValetAPI.Models.CustomerEntity", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ValetAPI.Models.SittingEntity", "Sitting")
                        .WithMany("Reservations")
                        .HasForeignKey("SittingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ValetAPI.Models.VenueEntity", "Venue")
                        .WithMany("Reservations")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Sitting");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("ValetAPI.Models.SittingEntity", b =>
                {
                    b.HasOne("ValetAPI.Models.VenueEntity", "Venue")
                        .WithMany("Sittings")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("ValetAPI.Models.TableEntity", b =>
                {
                    b.HasOne("ValetAPI.Models.AreaEntity", "Area")
                        .WithMany("Tables")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ValetAPI.Models.ReservationEntity", "Reservation")
                        .WithMany("Tables")
                        .HasForeignKey("ReservationId");

                    b.Navigation("Area");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("ValetAPI.Models.AreaEntity", b =>
                {
                    b.Navigation("AreaSittings");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ValetAPI.Models.CustomerEntity", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ValetAPI.Models.ReservationEntity", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ValetAPI.Models.SittingEntity", b =>
                {
                    b.Navigation("AreaSittings");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ValetAPI.Models.VenueEntity", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Reservations");

                    b.Navigation("Sittings");
                });
#pragma warning restore 612, 618
        }
    }
}
